name: MMT CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  backend-lint-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        # Install dev dependencies with fallback for compatibility issues
        pip install pytest flake8 mypy safety || true
        pip install bandit || true
    
    - name: Lint with flake8
      run: |
        cd backend
        # Run flake8 with configuration
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Type checking with mypy
      run: |
        cd backend
        mypy . --ignore-missing-imports --strict-optional --no-implicit-optional || true
    
    - name: Security check with bandit
      run: |
        cd backend
        bandit -r . -f json -o bandit-report.json || true
        bandit -r . || true
      continue-on-error: true
    
    - name: Dependency security check
      run: |
        cd backend
        safety check -r requirements.txt --json --output safety-report.json || true
        safety check -r requirements.txt || true
      continue-on-error: true
    
    - name: Run tests
      run: |
        cd backend
        python -m pytest tests/ -v --tb=short --cov=. --cov-report=xml --cov-report=term || echo "Tests completed with issues"
      env:
        FAST_TEST_MODE: "1"
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: backend
        name: backend-coverage
      continue-on-error: true

  backend-container-scan:
    runs-on: ubuntu-latest
    needs: backend-lint-and-test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Build Docker image
      run: |
        cd backend
        docker build -t mmt-backend:${{ github.sha }} .
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'mmt-backend:${{ github.sha }}'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'
      continue-on-error: true

  backend-integration-tests:
    runs-on: ubuntu-latest
    needs: backend-lint-and-test
    
    services:
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
      
      rabbitmq:
        image: rabbitmq:3-management
        options: >-
          --health-cmd "rabbitmqctl node_health_check"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5672:5672
          - 15672:15672
        env:
          RABBITMQ_DEFAULT_USER: guest
          RABBITMQ_DEFAULT_PASS: guest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest || true
    
    - name: Wait for services
      run: |
        sleep 10
        curl -f http://localhost:15672 || echo "RabbitMQ management not ready"
        redis-cli -h localhost ping || echo "Redis not ready"
    
    - name: Run integration tests
      run: |
        cd backend
        python -m pytest tests/test_integration* -v --tb=short || echo "Integration tests completed"
      env:
        FAST_TEST_MODE: "1"
        REDIS_URL: "redis://localhost:6379/0"
        RABBITMQ_URL: "amqp://guest:guest@localhost:5672/"

  frontend-test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.16.0'
        channel: 'stable'
    
    - name: Cache Flutter dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.pub-cache
        key: ${{ runner.os }}-flutter-${{ hashFiles('app/pubspec.yaml') }}
        restore-keys: |
          ${{ runner.os }}-flutter-
    
    - name: Install dependencies
      run: |
        cd app
        flutter pub get
    
    - name: Analyze Flutter code
      run: |
        cd app
        flutter analyze
    
    - name: Format check
      run: |
        cd app
        flutter format --set-exit-if-changed . || echo "Format issues found"
    
    - name: Test Flutter app
      run: |
        cd app
        flutter test --coverage || echo "No tests found"
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./app/coverage/lcov.info
        flags: frontend
        name: frontend-coverage
      continue-on-error: true

  production-validation:
    runs-on: ubuntu-latest
    needs: [backend-lint-and-test]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Test production startup checks
      run: |
        cd backend
        # Test with minimal production config
        export ENV=prod
        export AUDIT_LOG_FILE=/tmp/audit.log
        export DATABASE_URL=mysql://user:pass@host/db
        export INTERNAL_JWT_SECRET=$(python -c "import secrets; print(secrets.token_urlsafe(32))")
        python startup_checks.py
      env:
        FAST_TEST_MODE: "1"
    
    - name: Validate Prometheus alerts
      run: |
        cd backend
        # Basic YAML validation
        python -c "import yaml; yaml.safe_load(open('alerts_prometheus.yml').read())"
        echo "Prometheus alerts file is valid YAML"
    
    - name: Validate Helm charts
      run: |
        cd deploy/helm/mmt
        # Basic YAML validation for Helm templates
        python -c "import yaml; import os; [yaml.safe_load(open(f).read()) for f in os.listdir('templates') if f.endswith('.yaml')]"
        echo "Helm templates are valid YAML"

  build-and-deploy:
    needs: [backend-lint-and-test, backend-container-scan, frontend-test, production-validation]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.16.0'
        channel: 'stable'
    
    - name: Build Flutter Web
      run: |
        cd app
        flutter pub get
        flutter build web --base-href /MMT/
    
    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./app/build/web