name: deploy

on:
  push:
    branches: [ main ]
    paths:
      - 'backend/**'
      - 'deploy/helm/mmt/**'
      - '.github/workflows/deploy.yml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment (dev/staging/prod)'
        required: false
        default: 'dev'
      chart_version:
        description: 'Override chart version'
        required: false
      image_tag:
        description: 'Override image tag'
        required: false

env:
  REGISTRY: ghcr.io
  # Ensure image name is lowercase to satisfy Docker/GHCR requirements
  IMAGE_NAME: ${{ github.repository_owner }}/mmt-backend

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
    outputs:
      image_tag: ${{ steps.meta.outputs.version }}
    steps:
      - uses: actions/checkout@v4
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3
      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
            registry: ghcr.io
            username: ${{ github.actor }}
            password: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract image metadata
        id: meta
        run: |
          TAG="${{ github.sha }}"
          if [ -n "${{ github.event.inputs.image_tag }}" ]; then TAG="${{ github.event.inputs.image_tag }}"; fi
          echo "version=$TAG" >> "$GITHUB_OUTPUT"
      - name: Build and push image
        uses: docker/build-push-action@v6
        with:
          context: ./backend
          file: backend/Dockerfile
          push: true
          platforms: linux/amd64
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}
          build-args: |
            BUILDKIT_INLINE_CACHE=1
  helm-upgrade:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: always()
    permissions:
      contents: read
      packages: read
    env:
      ENVIRONMENT: ${{ github.event.inputs.environment || 'dev' }}
    steps:
      - uses: actions/checkout@v4
      - name: Create image override file
        run: |
          mkdir -p /tmp/overrides
          repo="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}"
          # repo should already be lowercase because IMAGE_NAME uses github.repository_owner
          printf 'image:\n  repository: %s\n  tag: %s\nservice:\n  port: 80\n  targetPort: 9000\n' "$repo" "${{ needs.build-and-push.outputs.image_tag }}" > /tmp/overrides/values-override.yaml
      - name: Create OpenAI k8s secret (if provided)
        if: "${{ env.ENVIRONMENT != 'dev' }} && (secrets.OPENAI_API_KEY != '')"
        run: |
          echo "Creating namespace and openai secret"
          kubectl create namespace mmt || true
          kubectl delete secret mmt-openai-secret -n mmt || true
          echo "${{ secrets.OPENAI_API_KEY }}" | base64 --decode > /tmp/openai_key || true
          kubectl create secret generic mmt-openai-secret -n mmt --from-file=OPENAI_API_KEY=/tmp/openai_key
          echo "openai.secretName=mmt-openai-secret" >> /tmp/overrides/values-override.yaml
      - name: Install Helm
        uses: azure/setup-helm@v4
        with:
          version: v3.15.2
      - name: Authenticate to GKE (Google Kubernetes Engine)
        if: "${{ env.ENVIRONMENT != 'dev' }}"
        uses: google-github-actions/get-gke-credentials@v1
        with:
          # These values must be provided as repository secrets (see .github/DEPLOY_NOTES.md)
          cluster_name: ${{ secrets.GKE_CLUSTER }}
          location: ${{ secrets.GKE_LOCATION }}
          project_id: ${{ secrets.GKE_PROJECT }}
          credentials: ${{ secrets.GKE_SA_KEY }}
        env:
          CLOUDSDK_CORE_DISABLE_PROMPTS: '1'
      - name: Kube config (self-hosted dev)
        if: "${{ env.ENVIRONMENT == 'dev' }}"
        run: |
          echo "Checking for available kubeconfig/context"
          if ! kubectl version --client >/dev/null 2>&1; then
            echo "kubectl is not available in runner" >&2
            exit 1
          fi
          if ! kubectl config current-context >/dev/null 2>&1; then
            echo "No kube context found. Skipping deploy to cluster." >&2
            exit 1
          fi
      - name: Helm upgrade
        run: |
          RELEASE=mmt
          CHART=deploy/helm/mmt
          helm upgrade --install $RELEASE $CHART -f $CHART/values.yaml -f /tmp/overrides/values-override.yaml --namespace mmt --create-namespace
      - name: Wait for rollout
        run: |
          kubectl rollout status deploy/mmt -n mmt --timeout=180s || kubectl get pods -n mmt
