name: Deploy Backend Production to Railway

on:
  workflow_run:
    workflows: ["MMT CI/CD", "security-scan", "Mobile CI"]
    types:
      - completed
    branches: [ main ]
  workflow_dispatch:
    inputs:
      release_tag:
        description: 'Optional tag to create after successful deploy (e.g. v0.3.1)'
        required: false
      include_ml:
        description: 'Install heavy ML deps (whisper, torch, spacy)'
        required: false
        default: 'true'
      production_mode:
        description: 'Deploy in full production mode (no demo)'
        required: false
        default: 'true'

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    # Only run if triggered by workflow_run and all workflows succeeded, or manually dispatched
    if: ${{ (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success') || github.event_name == 'workflow_dispatch' }}
    steps:
      - name: Log trigger information
        run: |
          echo "Deployment triggered by: ${{ github.event_name }}"
          if [ "${{ github.event_name }}" = "workflow_run" ]; then
            echo "Triggering workflow: ${{ github.event.workflow_run.name }}"
            echo "Workflow conclusion: ${{ github.event.workflow_run.conclusion }}"
            echo "Workflow head SHA: ${{ github.event.workflow_run.head_sha }}"
          fi

      - name: Checkout
        uses: actions/checkout@v4
        with:
          # When triggered by workflow_run, checkout the head SHA of the triggering workflow
          ref: ${{ github.event_name == 'workflow_run' && github.event.workflow_run.head_sha || github.sha }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install backend dependencies (production mode)
        working-directory: backend
        env:
          INCLUDE_ML: ${{ github.event.inputs.include_ml || 'true' }}
          PRODUCTION_MODE: ${{ github.event.inputs.production_mode || 'true' }}
        run: |
          set -e
          echo "INCLUDE_ML=$INCLUDE_ML"
          echo "PRODUCTION_MODE=$PRODUCTION_MODE"
          if [ "${INCLUDE_ML}" = "true" ]; then
            echo "Installing full stack (base + ML) for production";
            pip install -r requirements.txt;
          else
            echo "Installing light stack (no heavy ML)";
            pip install -r requirements.light.txt;
          fi
          python -m py_compile $(git ls-files '*.py' | tr '\n' ' ')

      - name: Install Railway CLI
        run: |
          npm install -g @railway/cli

      - name: Deploy to Railway (Production Mode)
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
          PRODUCTION_MODE: ${{ github.event.inputs.production_mode || 'true' }}
        run: |
          if [ -z "$RAILWAY_TOKEN" ]; then
            echo "RAILWAY_TOKEN secret not set" >&2
            exit 1
          fi
          echo "Deploying backend in production mode: $PRODUCTION_MODE"
          
          # Change to backend directory
          cd backend
          
          echo "Starting Railway deployment with token authentication..."
          # List available services for debugging
          echo "Available services:"
          railway status || echo "Status command failed"
          railway list || echo "List command failed"
          # Try deployment without service flag first
          railway up --detach

      - name: Post-deploy info
        if: always()
        run: echo "Deployment attempt finished (see Railway dashboard for status)."

      - name: Smoke wait & probe health
        if: success()
        env:
          REMOTE_API_BASE_URL: ${{ secrets.REMOTE_API_BASE_URL }}
          ADMIN_API_KEY: ${{ secrets.ADMIN_API_KEY }}
        run: |
          if [ -z "$REMOTE_API_BASE_URL" ]; then
            echo "REMOTE_API_BASE_URL secret not set; skipping smoke tests"; exit 0; fi
          echo "Waiting 15s for service warm-up..."; sleep 15
          set -e
          curl -fsS -o /dev/null "$REMOTE_API_BASE_URL/health/live" || { echo 'Health endpoint failed'; exit 1; }
          STATUS_JSON=$(curl -fsS "$REMOTE_API_BASE_URL/demo/status" || echo '{}')
          echo "demo/status => $STATUS_JSON"
          DEMO_MODE=$(echo "$STATUS_JSON" | grep -o 'demo_mode": *[^,}]*' | awk -F: '{print $2}' | tr -d ' "')
          if [ "$DEMO_MODE" = "true" ] || [ "$DEMO_MODE" = "True" ]; then
            echo 'ERROR: Backend still in demo_mode=true for production deploy'; exit 1; fi
          echo 'Smoke checks passed.'

      - name: Transcription ambient smoke
        if: success()
        env:
          REMOTE_API_BASE_URL: ${{ secrets.REMOTE_API_BASE_URL }}
          ADMIN_API_KEY: ${{ secrets.ADMIN_API_KEY }}
        run: |
          if [ -z "$REMOTE_API_BASE_URL" ]; then echo "REMOTE_API_BASE_URL not set; skipping ambient transcription smoke"; exit 0; fi
          if [ -z "$ADMIN_API_KEY" ]; then echo "ADMIN_API_KEY not set; skipping ambient transcription smoke"; exit 0; fi
          echo 'Attempt ambient transcription JSON path'
          RESP=$(curl -s -o /dev/stderr -w '%{http_code}' -X POST "$REMOTE_API_BASE_URL/transcribe/cloud/" \
            -H "Authorization: Bearer $ADMIN_API_KEY" -H 'Content-Type: application/json' \
            -d '{"text":"ping smoke"}')
          CODE=$(echo "$RESP" | tail -n1 | tr -dc '0-9')
          if [ "$CODE" = "403" ]; then echo 'Cloud transcription disabled (403) - treating as non-fatal'; exit 0; fi
          if [ "$CODE" != "200" ]; then echo "Unexpected status $CODE from transcription endpoint"; exit 1; fi
          echo 'Ambient transcription smoke succeeded.'

      - name: Create release tag
        if: success() && github.event.inputs.release_tag != ''
        run: |
          git config user.name 'github-actions'
          git config user.email 'actions@users.noreply.github.com'
          git tag "${{ github.event.inputs.release_tag }}"
          git push origin "${{ github.event.inputs.release_tag }}"